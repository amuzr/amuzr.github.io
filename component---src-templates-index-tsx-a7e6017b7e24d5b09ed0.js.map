{"version":3,"sources":["webpack:///./src/components/Pagination.tsx","webpack:///./src/templates/index.tsx","webpack:///./src/components/PostCard.tsx"],"names":["navCss","css","darken","colors","darkgrey","Pagination","_ref","currentPage","numPages","isFirst","isLast","prevPage","toString","nextPage","Object","core_browser_esm","gatsby_browser_entry","to","rel","String","fromCharCode","Array","from","length","_","i","key","className","IndexPageStyle","name","styles","pageQuery","IndexPage","props","layouts","Helmet","lang","config","title","content","Wrapper","Header","role","data","allMarkdownRemark","edges","filter","edge","node","fields","collection","map","post","frontmatter","draft","PostCard","slug","children","components_Pagination","pageContext","Footer","PostCardStyle","PostCardContent","_emotion_styled_base__WEBPACK_IMPORTED_MODULE_0__","target","PostCardTitle","PostCardExcerpt","ReadingTime","PostCardImage","_emotion_core__WEBPACK_IMPORTED_MODULE_1__","gatsby__WEBPACK_IMPORTED_MODULE_2__","excerpt","timeToRead","image","gatsby_image__WEBPACK_IMPORTED_MODULE_3___default","a","alt","style","height","fluid","childImageSharp"],"mappings":"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","file":"component---src-templates-index-tsx-a7e6017b7e24d5b09ed0.js","sourcesContent":["import { Link } from 'gatsby';\nimport * as React from 'react';\nimport { darken } from 'polished';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\n\nconst navCss = css`\n  text-align: center;\n  div {\n    display: inline-block;\n  }\n\n  a {\n    font-family: 'Nanum Myeongjo', Roboto, Oxygen, Ubuntu, Cantarell;\n    font-size: 0.8rem;\n    line-height: 2;\n    background: #fff;\n    color: black;\n    float: left;\n    // padding: 8px 16px;\n    text-decoration: none;\n    transition: background-color 0.3s;\n    border: 1px solid #ddd;\n    margin: 0 4px;\n    box-shadow: rgba(39, 44, 49, 0.06) 8px 14px 38px, rgba(39, 44, 49, 0.03) 1px 3px 8px;\n    border-radius: 6px;\n    margin-bottom: 5px;\n    min-width: 30px;\n\n    &.active {\n      -webkit-box-shadow: inset 1px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      -moz-box-shadow: inset 1px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n      box-shadow: inset 1px 0px 0px 0px ${darken(0.05, colors.darkgrey)};\n    }\n\n    &:hover:not(.active) {\n      background-color: #ddd;\n    }\n\n    &:hover {\n      text-decoration: none;\n    }\n  }\n`;\n\nexport interface PaginationProps {\n  currentPage: number;\n  numPages: number;\n}\n\nconst Pagination: React.FunctionComponent<PaginationProps> = ({ currentPage, numPages }) => {\n  const isFirst = currentPage === 1;\n  const isLast = currentPage === numPages;\n  const prevPage = currentPage - 1 === 1 ? '/' : (currentPage - 1).toString();\n  const nextPage = (currentPage + 1).toString();\n\n  return (\n    <nav css={navCss}>\n      <div>\n        {!isFirst && (\n          <Link to={prevPage} rel=\"prev\">\n            {/* << symbol */}\n            {String.fromCharCode(171)}\n          </Link>\n        )}\n\n        {Array.from({ length: numPages }, (_, i) => (\n          <Link\n            key={`pagination-number${i + 1}`}\n            className={i + 1 === currentPage ? 'active' : ''}\n            to={`/${i === 0 ? '' : i + 1}`}\n          >\n            {i + 1}\n          </Link>\n        ))}\n\n        {!isLast && (\n          <Link to={nextPage} rel=\"next\">\n            {/* >> symbol */}\n            {String.fromCharCode(187)}\n          </Link>\n        )}\n      </div>\n    </nav>\n  );\n};\n\nexport default Pagination;\n","import { graphql } from 'gatsby';\nimport * as React from 'react';\nimport { css } from '@emotion/core';\nimport { Helmet } from 'react-helmet';\n\nimport config from '../website-config';\n\nimport Wrapper from '../components/Wrapper';\nimport Header from '../components/Header';\nimport Footer from '../components/Footer';\nimport PostCard from '../components/PostCard';\nimport Pagination from '../components/Pagination';\nimport IndexLayout from '../layouts';\n\nimport { PageContext } from './post';\n\nconst IndexPageStyle = css`\n  flex: 1 1 auto;\n  align-items: center;\n`;\n\nexport interface IndexProps {\n  pageContext: {\n    currentPage: number;\n    numPages: number;\n  };\n  data: {\n    allMarkdownRemark: {\n      edges: Array<{\n        node: PageContext;\n      }>;\n    };\n  };\n}\n\nconst IndexPage: React.FC<IndexProps> = props => {\n  return (\n    <IndexLayout className=\"post-template\">\n      <Helmet>\n        <html lang=\"ko\" />\n        <title>{config.title}</title>\n        <meta name=\"description\" content=\"test\" />\n      </Helmet>\n      <Wrapper>\n        <Header />\n        <main css={IndexPageStyle} role=\"main\">\n          {props.data.allMarkdownRemark.edges\n            .filter(edge => edge.node.fields.collection === 'content')\n            .map(post => {\n              // filter out drafts in production\n              return (\n                (post.node.frontmatter.draft !== true || process.env.NODE_ENV !== 'production') && (\n                  <PostCard key={post.node.fields.slug} post={post.node} />\n                )\n              );\n            })}\n        </main>\n        {props.children}\n        <Pagination\n          currentPage={props.pageContext.currentPage}\n          numPages={props.pageContext.numPages}\n        />\n        <Footer />\n      </Wrapper>\n    </IndexLayout>\n  );\n};\n\nexport default IndexPage;\n\nexport const pageQuery = graphql`\n  query blogPageQuery($skip: Int!, $limit: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      filter: { frontmatter: { draft: { ne: true } } }\n      limit: $limit\n      skip: $skip\n    ) {\n      edges {\n        node {\n          timeToRead\n          frontmatter {\n            title\n            date\n            tags\n            draft\n          }\n          excerpt(truncate: true)\n          fields {\n            layout\n            slug\n            collection\n          }\n        }\n      }\n    }\n  }\n`;\n","import { Link } from 'gatsby';\nimport Img from 'gatsby-image';\nimport * as React from 'react';\nimport styled from '@emotion/styled';\nimport { css } from '@emotion/core';\n\nimport { colors } from '../styles/colors';\nimport { PageContext } from '../templates/post';\n\nconst PostCardStyle = css`\n  margin: 0 0 4rem;\n  display: flex;\n\n  @media (max-width: 500px) {\n    flex-direction: column;\n    /* margin: 0 0 4rem; */\n  }\n`;\nconst PostCardContent = styled.div`\n  width: 100%;\n`;\nconst PostCardTitle = styled.h1`\n  font-weight: 700;\n  margin: 0;\n\n  a {\n    color: rgba(0, 0, 0, 0.8);\n  }\n`;\nconst PostCardExcerpt = styled.div`\n  margin: 0.3rem 0 0.4em;\n  line-height: 1.45;\n`;\nconst ReadingTime = styled.div`\n  display: block;\n  font-family: 'Avenir';\n  font-size: 0.8rem;\n  color: rgba(0, 0, 0, 0.58);\n  /* margin: 0.3rem 0; */\n`;\nconst PostCardImage = styled.div`\n  margin-left: 2rem;\n\n  img {\n    width: 9rem;\n  }\n\n  @media (max-width: 500px) {\n    margin: 0;\n    order: -1;\n\n    .card__img {\n        width: 100%;\n    }\n`;\n\nexport interface PostCardProps {\n  post: PageContext;\n}\n\nconst PostCard: React.FC<PostCardProps> = ({ post }) => {\n  return (\n    <article className=\"post-card\" css={PostCardStyle} role=\"article\">\n      <Link to={post.fields.slug}>\n        <PostCardContent className=\"post-card-content\">\n          <header>\n            <PostCardTitle>{post.frontmatter.title}</PostCardTitle>\n          </header>\n          <PostCardExcerpt>\n            <p>{post.excerpt}</p>\n          </PostCardExcerpt>\n          <ReadingTime>{post.timeToRead} min read</ReadingTime>\n        </PostCardContent>\n      </Link>\n      {post.frontmatter.image && (\n        <Link to={post.fields.slug}>\n          <PostCardImage>\n            <Img\n              alt={post.frontmatter.title}\n              style={{ height: '100%' }}\n              fluid={post.frontmatter.image.childImageSharp.fluid}\n            />\n          </PostCardImage>\n        </Link>\n      )}\n    </article>\n  );\n};\n\nexport default PostCard;\n"],"sourceRoot":""}